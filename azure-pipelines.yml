# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

resources:
  repositories:
  - repository: DevOpsScripts
    type: git
    name: kcc-cicd/DevOpsScripts
    ref: uday

stages:
- stage: Build 
  jobs:
#  - job: 'AgentJob_Build'
#    pool:
#      name: 'KC Hosted API'

#   steps:
#    - checkout: DevOpsScripts
#      clean: true
#    - checkout: self
#      clean: true

#    - task: DutchWorkzToolsAllVariables@1  

#    - task: Maven@3
#      inputs:
#        mavenPomFile: 'hello-world/pom.xml'
#        mavenOptions: '-Xmx3072m'
#        javaHomeOption: 'JDKVersion'
#        jdkVersionOption: '1.8'
#        jdkArchitectureOption: 'x64'
#        publishJUnitResults: true
#        testResultsFiles: '**/surefire-reports/TEST-*.xml'
#        goals: 'clean package cobertura:cobertura'
#        codeCoverageToolOption: 'cobertura'

#     - task: PublishCodeCoverageResults@1
#       inputs:
#         codeCoverageTool: 'cobertura'
#         summaryFileLocation: '$(Agent.BuildDirectory)/s/target/surefire-reports/TEST-hello.GreeterTest.xml'
#         reportDirectory: '$(Agent.BuildDirectory)/s/target/surefire-reports'

#    - task: PublishBuildArtifacts@1
#      displayName: 'Publish Artifact: drop'

  - job: 'AgentJob_SonarQubeScans'
    pool:
      name: Azure Pipelines
      vmImage: 'vs2017-win2016'
     
    steps:
    - checkout: DevOpsScripts
      clean: true
    - checkout: self
      clean: true

    - task: KcDisplayEnvironmentVariables@0
    - task: DutchWorkzToolsAllVariables@1  
    - task: KCSonarQubePrepare@5
      inputs:
        sq_env: 'prod'
        scannerMode: 'CLI'
        #projectKey: '$(Build.Repository.Name)'
        #projectName: '$(Build.Repository.Name)'
        #sonar.SONAR_RUNNER_OPTS=-Xdebug
        configMode: 'file'
        extraProperties: |
          sonar.projectName=hello
          sonar.projectKey=hello
          sonar.sources=$(Agent.BuildDirectory)/s/hello-world/src/main/java
          sonar.languages=mule4
          sonar.verbose=true
          sonar.java.binaries=$(Agent.BuildDirectory)/s/hello-world/target/classes/hello
          #sonar.cobertura.reportPath=$(System.DefaultWorkingDirectory)/target/site/cobertura/coverage.xml
          #sonar.junit.reportsPath=$(System.DefaultWorkingDirectory)/target/surefire-reports/TEST-hello.GreeterTest.xml

    #- task: Bash@3
    #  inputs:
    #    targetType: 'inline'
    #    script: |
    #      export surl=$(sonarqube-serviceurl)
    #      export stoken=$(sonarqube-token)
    #      echo value of surl is $surl
    #      echo value of stoken is $stoken
    #      echo value of url from test is $test

    #- task: Bash@3
    #  inputs:
    #    targetType: 'inline'
    #    script: |
    #      export surl=$(sonarqube-serviceurl)
    #      export stoken=$(sonarqube-token)
    #      echo value of surl $surl
    #      "$(System.DefaultWorkingDirectory)\DevOpsScripts\gate.ps1 -surl $surl -stoken $stoken -gateId $(gateId) -projectKey $(projectKey)"
    #    workingDirectory: 'C:\Windows\System32\WindowsPowerShell\v1.0'
#
#    - task: PowerShell@2
#      inputs:
#        targetType: 'inline'
#        script: |
#          Write-Host "RUNNING GATE POWERSHELL"
#          Set-Variable -Name "surl" -Value "${sonarqube-serviceurl}"
#          Set-Variable -Name "stoken" -Value "${sonarqube-token}"
#          Get-Variable "surl"
#          Write-Host "surl value from setvariable:" "$surl"
#          "$(System.DefaultWorkingDirectory)\DevOpsScripts\gate.ps1 -gateId $(gateId) -projectKey $(projectKey)"


    -  task: PowerShell@2
       inputs:
        filePath: '$(System.DefaultWorkingDirectory)/DevOpsScripts/gate.ps1'
        arguments: '-gateId $(gateId) -projectKey $(projectKey) -url $(sonarqube-serviceurl)'

    
    # WORKING
    #- task: Bash@3
    #  inputs:
    #    targetType: 'inline'
    #    script: 'curl -u $(sonarqube-token): -X POST $(sonarqube-serviceurl)/$(sonar-api) -d "projectKey=hello&gateId=6"'
    #    #failOnStderr: true

    #- task: BatchScript@1
    #  inputs:
    #    filename: '"c:\Windows\System32\curl.exe"'
    #    arguments: '-u $(sonarqube-token): -X POST $(sonarqube-serviceurl)/$(sonar-api) -d "projectKey=hello&gateId=($qualitygate)"'
    #    failOnStandardError: true
    - task: Maven@3
      inputs:
        mavenPomFile: $(Agent.BuildDirectory)/s/hello-world/pom.xml
        goals: 'clean package cobertura:cobertura'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        testRunTitle: 'testtitle'
        codeCoverageToolOption: 'Cobertura'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        jdkArchitectureOption: 'x64'
        mavenVersionOption: 'Default'
        mavenOptions: '-Xmx3072m'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        #sonarQubeRunAnalysis: true (Same as KCSonarQubeAnalyze task )
        sqMavenPluginVersionChoice: 'latest'
        checkStyleRunAnalysis: true
        pmdRunAnalysis: true
        findBugsRunAnalysis: true

    - task: KCSonarQubeAnalyze@4
      displayName: 'K-C SonarQube Run Code Analysis'

    - task: KCSonarQubePublish@4
      displayName: 'K-C SonarQube Publish Quality Gate Result'
      inputs:
        pollingTimeoutSec: '300'
